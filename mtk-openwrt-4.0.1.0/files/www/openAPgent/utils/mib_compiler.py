#!/usr/bin/python

import sys
import os
import shutil


WORKDIR = os.path.abspath(os.path.join(os.path.dirname(__file__),".."))

DELIMETER='='
URI_PREFIX='URI' + DELIMETER
BASENAME_PREFIX='BASENAME' + DELIMETER
CLASSNAME_PREFIX='CLASSNAME' + DELIMETER
METHODLIST_PREFIX='METHODLIST' + DELIMETER

MIB_FILE=sys.argv[1]

if len(sys.argv) > 2:
	print " =================== TEST MODE =============="
	VIEW_FILE="MIB/views.py"
	URL_FILE="MIB/urls.py"
	SAL_FILE="MIB/sal.py"
	os.mknod(VIEW_FILE)
	os.mknod(URL_FILE)
	os.mknod(SAL_FILE)
else:
	VIEW_FILE=WORKDIR + "/apServer/server/custom_views.py"
	URL_FILE=WORKDIR + "/apServer/server/urls.py"
	SAL_FILE=WORKDIR + "/sal/sal.py"



'''
 Functions
'''
def get_django_header(filename):
	header = "'''\nThis file was automatically generated by mib_compiler.py.\n"
	header += "DO NOT EDIT.\n'''\n\n\n"

	if filename == URL_FILE:
		header += "from apServer.server import views\n"
		header += "from common.generic_defs import CustomRouter\n"
		header += "\ncustom_router = CustomRouter()\n\n"
	elif filename == VIEW_FILE:
		header += "import json\n"
		header += "from rest_framework import status, viewsets\n"
		header += "from rest_framework.response import Response\n"
		header += "from sal.sal import *\n"
		header += "from common.log import *\n\n"
	elif filename == SAL_FILE:
		header += "from puci.interface import *\n"
		header += "from puci.system import *\n\n"
		header += "'''\n Define SAL Method\n'''\n"
		header += "SAL_METHOD_LIST           = 1\n"
		header += "SAL_METHOD_RETRIEVE       = 2\n"
		header += "SAL_METHOD_CREATE         = 3\n"
		header += "SAL_METHOD_UPDATE         = 4\n"
		header += "SAL_METHOD_PARTIAL_UPDATE = 5\n"
		header += "SAL_METHOD_DELETE         = 6\n\n\n"
	else:
		return None

	return header


def make_url_lines(url_path, base_name, class_name, method_list):
	view_name = "views." + class_name + "ViewSet"
	wline = "custom_router.register(r\'" + url_path + "\', " + view_name + ", base_name=\'" + base_name + "\')\n"
	return wline



def make_view_lines(url_path, base_name, class_name, method_list):
	view_name = "views." + class_name + "ViewSet"

	wline = "\n\n'''\n Define Class " + class_name + "\n'''"
	wline += "\nclass " + class_name + "ViewSet(viewsets.ViewSet):\n"

	for method in method_list:
		if method == 'list' or method == 'create' or method == 'update':
			wline += "  def " + method + "(self, request):\n"
			wline += "    log_info(LOG_MODULE_APSERVER, \"*** " + class_name + " " + method + "() ***\")\n"
			wline += "    data = sal_" + base_name + "(SAL_METHOD_" + method.upper() + ", request.data, None)\n"				
		else:
			wline += "  def " + method + "(self, request, pk):\n"
			wline += "    log_info(LOG_MODULE_APSERVER, \"*** " + class_name + " " + method + "(), pk=\" + pk + \" ***\")\n"
			wline += "    data = sal_" + base_name + "(SAL_METHOD_" + method.upper() + ", request.data, pk)\n"				
		wline += "    return Response(data, content_type='application/json')\n\n"

	return wline


def make_sal_lines(url_path, base_name, class_name, method_list):

	wline = "\n\n'''\n Define " + base_name + " SAL function\n'''\n"
	wline += "def sal_" + base_name + "(method, request, pk):\n"
	
	for method in method_list:
		wline += "  if method == SAL_METHOD_" + method.upper() + ":\n"
		if method == 'list':
			wline += "    return " + base_name + "_" + method + "()\n"
		elif method == 'create' or method == 'update':
			wline += "    return " + base_name + "_" + method + "(request)\n"
		elif method == 'retrieve':
			wline += "    return " + base_name + "_" + method + "(pk)\n"
		else:
			wline += "    return " + base_name + "_" + method + "(request, pk)\n"

	wline += "  return None\n"

	return wline

def make_django_pyfile(filename, header):
	do_write=False
	shutil.copy (filename, filename + ".bp")

	wfile = open(filename, 'w')
	rfile = open(MIB_FILE, 'r')

	lines = rfile.readlines()
	print lines

	wline = header

	for line in lines:
		if line.strip() == '':
			continue

		line = line.splitlines()[0]

		if URI_PREFIX in line:
			url_path = line.split(DELIMETER)[1]
		elif BASENAME_PREFIX in line:
			base_name = line.split(DELIMETER)[1]
		elif CLASSNAME_PREFIX in line:
			class_name = line.split(DELIMETER)[1]
		elif METHODLIST_PREFIX in line:
			method_list = line.split(DELIMETER)
			method_list = method_list[1].split(',')
			do_write=True
		else:
			print "No such string: " + line

		if do_write == True:
			print "============= " + filename +  " ================="
			print "URL_PATH:    " + url_path
			print "BASE_NAME:   " + base_name
			print "CLASS_NAME:  " + class_name
			print "METHOD_LIST: " + str(method_list)
			view_name = "views." + class_name + "ViewSet"
			print "VIEW_NAME:   " + view_name

			if filename == URL_FILE:
				wline += make_url_lines(url_path, base_name, class_name, method_list)
			elif filename == VIEW_FILE:
				wline += make_view_lines(url_path, base_name, class_name, method_list)
			elif filename == SAL_FILE:
				wline += make_sal_lines(url_path, base_name, class_name, method_list)
			do_write = False

	rfile.close()

	wfile.write(wline)
	wfile.close()



'''
 Main routine
'''
header = get_django_header(URL_FILE)
make_django_pyfile(URL_FILE, header)

header = get_django_header(VIEW_FILE)
make_django_pyfile(VIEW_FILE, header)

header = get_django_header(SAL_FILE)
make_django_pyfile(SAL_FILE, header)
